def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg1 < arg2:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(29):
        var7.func3(arg2, arg1)
    var12 = func6(arg2, arg1)
    var17 = func8(arg1, arg2)
    var22 = func9(var12, arg2)
    var27 = func10(var17, var22)
    var28 = arg1 | -1870365246 ^ -234
    var29 = var28 - -1306587206 | -1627629363 - var12
    if var12 < var22:
        var30 = var28 + var12
    else:
        var30 = var29 + var22 | (1561560268 + -1316729996)
    if var29 < arg1:
        var31 = (var27 - arg1) + var22 ^ arg2
    else:
        var31 = (var27 - var29) & var27 ^ var29
    var32 = (var12 + var29) - var28 + var12
    var33 = (arg1 | var22) | var12 + var22
    if var17 < arg2:
        var34 = (var32 ^ arg1 + var22) | var28
    else:
        var34 = var29 + arg2
    var35 = var12 ^ (var22 - var29 - arg2)
    if var28 < var32:
        var36 = var32 | (var27 | var22 - var32)
    else:
        var36 = var29 & var27
    var37 = arg2 + (arg2 - var27) - var28
    var38 = var37 - arg2 & var37
    var39 = var28 | var37
    var40 = var35 ^ var29 ^ var29 ^ var37
    var41 = 288327321 - ((var39 | var27) + var29)
    if var12 < var38:
        var42 = (arg1 + var27) - arg1
    else:
        var42 = arg2 ^ var35
    var43 = var35 - ((var27 & arg2) + var37)
    var44 = var12 ^ var35
    var45 = (1090052105 ^ var39) | var17 & var38
    result = var12 - var45 ^ ((arg2 ^ var40) - (var41 - var41 + (var28 & var22 + var22) | var37)) - var33 + arg2
    return result
def func10(arg23, arg24):
    var25 = 0
    for var26 in xrange(21):
        var25 += var25 & (var26 - var26)
    return var25
def func9(arg18, arg19):
    var20 = 0
    for var21 in range(7):
        var20 += -1 - (2 ^ var21)
    return var20
def func8(arg13, arg14):
    var15 = 0
    for var16 in xrange(9):
        var15 += arg14 - var15 & arg14
    return var15
class class4(object):
    def func3(self, arg5, arg6):
        return 0
class class2(class4):
    def func3(self, arg3, arg4):
        result = arg4 | 1657882040
        return result
def func6(arg9, arg10):
    def func7(acc, rest):
        var11 = (-9 | 1) ^ 1
        if acc == 0:
            return var11
        else:
            result = func7(acc - 1, var11)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
